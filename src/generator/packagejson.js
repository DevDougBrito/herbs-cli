const { exec } = require('child_process')
function childProcess (process) {
  return new Promise((resolve, reject) => {
    const cp = exec(process, function (error, stdout, stderr) {
      if (error) {
        console.log(error.stack)
        console.log('Error code: ' + error.code)
        console.log('Signal received: ' + error.signal)

        reject(error.stack)
      }
      console.log('Child Process STDOUT: ' + stdout)
      console.log('Child Process STDERR: ' + stderr)
      resolve()
    })

    cp.on('exit', function (code) {
      resolve()
    })
  })
}

async function installPkgs (useYarn, pkgs) {
  useYarn
    ? await childProcess(`yarn add ${pkgs.join([' '])}`)
    : await childProcess(`npm install ${pkgs.join([' '])}`)
}

module.exports = async ({
  generate,
  options: {
    name = 'herbs-project',
    description = 'project generated by herbs CLI S2',
    author = 'herbs CLI',
    license = 'MIT',
    mongo = false,
    postgres = false,
    yarn = false
  }
}) => async () => {
  let migration = postgres ? `,
      "knex:make": "npx knex --knexfile knexfile.js migrate:make",
      "knex:migrate": "npx knex --knexfile knexfile.js migrate:latest",
      "knex:rollback": "npx knex --knexfile knexfile.js migrate:rollback",
      "knex:makeSeeds": "npx knex --knexfile knexfile.js seed:make",
      "knex:runSeeds": "npx knex --knexfile knexfile.js seed:run"` : ''

  await generate({
    template: 'package.json.ejs',
    target: `package.json`,
    props: {
      name, description, author, license, migration
    }
  })

  await installPkgs(yarn, ['buchu', 'gotu', 'deepmerge'])

  const packages = [
    'herbs2gql',
    'graphql',
    'apollo-server-express',
    'apollo-server',
    'sugar-env',
    'dotenv',
    'herbsshelf',
    'herbs2rest',
    'graphql-tools',
    'nodemon']

  if (mongo) { packages.push('mongodb') }
  if (postgres) {
    packages.push('herbs2knex')
    packages.push('pg')
  }
  await installPkgs(yarn, packages)
}
