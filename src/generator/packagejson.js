const { exec } = require('child_process')
function childProcess (process, print) {
  return new Promise((resolve, reject) => {
    print.info('[INFO] Installing dependencies...')
    print.info(`> ${process}`)
    const cp = exec(process)

    cp.stdout.on('data', (data) => {
      console.log(data.toString())
    })

    cp.on('exit', () => {
      resolve()
    })

    cp.on('error', (error) => {
      reject(error)
    })
  })
}

async function installPkgs (useYarn, pkgs, print) {
  useYarn
    ? await childProcess(`yarn add ${pkgs.join([' '])}`, print)
    : await childProcess(`npm install ${pkgs.join([' '])}`, print)
}

module.exports = async ({
  generate,
  options: {
    name = 'herbs-project',
    description = 'project generated by herbs CLI S2',
    author = 'herbs CLI',
    license = 'MIT',
    mongo = false,
    postgres = false,
    yarn = false
  },
  print
}) => async () => {
  let migration = postgres ? `,
      "knex:make": "npx knex --knexfile knexfile.js migrate:make",
      "knex:migrate": "npx knex --knexfile knexfile.js migrate:latest",
      "knex:rollback": "npx knex --knexfile knexfile.js migrate:rollback",
      "knex:makeSeeds": "npx knex --knexfile knexfile.js seed:make",
      "knex:runSeeds": "npx knex --knexfile knexfile.js seed:run"` : ''

  await generate({
    template: 'package.json.ejs',
    target: `package.json`,
    props: {
      name, description, author, license, migration
    }
  })

  await installPkgs(yarn, ['@herbsjs/herbs', 'deepmerge'], print)

  const packages = [
    '@herbsjs/herbs2gql',
    'graphql@15.5.1',
    'apollo-server-express@2.25.2',
    'apollo-server@2.25.2',
    'sugar-env@1.5.14',
    'dotenv@10.0.0',
    '@herbsjs/herbsshelf',
    '@herbsjs/herbs2rest',
    'graphql-tools@8.1.0',
    'nodemon']

  if (mongo) { packages.push('mongodb') }
  if (postgres) {
    packages.push('@herbsjs/herbs2knex')
    packages.push('pg')
  }
  await installPkgs(yarn, packages, print)
}
