const generator = require('../generator')
const fs = require('fs')
const inquirer = require('inquirer')

function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}

const questions = [
  {
    type: 'input',
    name: 'name',
    message: 'project name?',
    filter (val) {
      return val.toLowerCase()
    },
    default: 'herbs-project'
  },
  {
    type: 'input',
    name: 'description',
    message: 'project description?',
    filter (val) {
      return val.toLowerCase()
    },
    default: 'project generated by herbs-cli'
  },
  {
    type: 'input',
    name: 'author',
    message: "project author's name?",
    filter (val) {
      return val.toLowerCase()
    },
    default: 'herbs CLI'
  },
  {
    type: 'list',
    name: 'license',
    message: 'What license do you want to use?',
    choices: ['MIT', 'BSD', 'GNU'],
    default: ''
  },
  {
    type: 'confirm',
    name: 'graphql',
    message: 'Generate graphql layer?',
    default: true
  },
  {
    type: 'confirm',
    name: 'rest',
    message: 'Generate rest layer?',
    default: true
  },
  {
    type: 'list',
    name: 'database',
    message: 'What database do you want to use?',
    choices: ['Mongo', 'Postgres'],
    filter (val) {
      return val.toLowerCase()
    }
  },
  {
    type: 'list',
    name: 'database',
    message: 'What package manager do you want to use?',
    choices: ['Postgres', 'Mongo'],
    filter (val) {
      return val.toLowerCase()
    }
  },
  {
    type: 'input',
    name: 'entities',
    message: 'Specify your entities?',
    filter (val) {
      return val.toLowerCase()
    },
    default: 'optional'
  }
]

const cmd = {
  name: 'new',
  alias: ['n'],
  run: async toolbox => {
    let { options } = toolbox.parameters
    if(isEmpty(options)){
      options = await inquirer.prompt(questions)
      options.postgres = options.database === 'postgres'
      options.mongo = options.database === 'mongo'
      options.entities = options.entities === 'optional' ? '' : answers.entities  
    }

    const dir = `${toolbox.filesystem.cwd()}/${options.name}`
  
    if (!fs.existsSync(dir)) fs.mkdirSync(dir)
    process.chdir(dir)

    toolbox.parameters.options = options
    const generators = await generator(toolbox)
    const layers = Object.keys(generators)
    for (const layer of layers) await generators[layer]()
  }
}

module.exports = cmd
