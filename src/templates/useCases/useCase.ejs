const { usecase, step, Ok, Err } = require('buchu')
const { <%= props.name.pascalCase %> } = require('../entities>')

const useCase = ({ <%= props.name.camelCase %>Repository }) =>
  usecase('Create <%= props.name.pascalCase %>', {
    // Input/Request metadata and validation 
    request: <%= props.request %>,


    // Output/Response metadata
    response: <%= props.name.pascalCase %>,

    // Pre-run setup
    // setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),

    //Authorization with Audit
    authorize: user => (user.canCreate<%= props.name.pascalCase %> ? Ok() : Err()),

    //Step description and function
    'Check if the <%= props.name %> is valid': step(ctx => {
      ctx.<%= props.name.lowerCase %> = <%= props.name.pascalCase %>.fromJSON(<%- props.example %>)

      if (!ctx.<%= props.name.lowerCase %>.isValid()) return Err(ctx.<%= props.name.lowerCase %>.errors)
      // returning Ok continues to the next step. Err stops the use case execution.
      return Ok() 
    }),

    'Save the <%= props.name.pascalCase %>': step(async ctx => {
      // ctx.ret is the Use Case return
      return (ctx.ret.<%= props.name.camelCase %> = await <%= props.name.pascalCase %>Repository.insert(ctx.list)) 
    })
  })

module.exports.createList = useCase