const merge = require('deepmerge')
const { usecase, step, Ok, Err } = require('buchu')
const { <%= props.name.pascalCase %> } = require('../entities')

const useCase = ({ <%= props.name.camelCase %>Repository }) =>
  usecase('Update <%= props.name.pascalCase %>', {
    // Input/Request metadata and validation 
    request: {
      indexer: String,
      <%= props.name.camelCase %>: <%= props.name.pascalCase %>
    },


    // Output/Response metadata
    response: <%= props.name.pascalCase %>,

    // Pre-run setup
    // setup: ctx => (ctx.di = Object.assign({}, dependency, injection)),

    //Authorization with Audit
    authorize: user => (user.canUpdate<%= props.name.pascalCase %> ? Ok() : Err()),

    //Step description and function
    'Check if the <%= props.name.pascalCase %> is valid': step(async ctx => {
      const <%= props.name.camelCase %> = await <%= props.name.camelCase %>Repository.findOne(ctx.req.indexer)
      const new<%= props.name.pascalCase %> = merge.all([ <%= props.name.camelCase %>, ctx.req.<%= props.name.camelCase %> ])
      ctx.<%= props.name.camelCase %> = <%= props.name.pascalCase %>.fromJSON(new<%= props.name.pascalCase %>)

      if (!ctx.<%= props.name.camelCase %>.isValid()) return Err(ctx.<%= props.name.camelCase %>.errors)
      // returning Ok continues to the next step. Err stops the use case execution.
      return Ok() 
    }),

    'Update the <%= props.name.pascalCase %>': step(async ctx => {
      // ctx.ret is the Use Case return
      return (ctx.ret = await <%= props.name.camelCase %>Repository.update(ctx.req.indexer, ctx.<%= props.name.camelCase %>)) 
    })
  })

module.exports = useCase