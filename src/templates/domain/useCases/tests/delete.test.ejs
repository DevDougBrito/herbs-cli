const delete<%= props.name.pascalCase %> = require('./delete<%= props.name.pascalCase %>')
const assert = require('assert')


describe('Delete <%= props.name.pascalCase %>', () => {
  const authorizedUser = { hasAccess = true }

  describe('Valid <%= props.name.pascalCase %>', () => {

    it('should delete <%= props.name.pascalCase %> if is valid', async () => {
      // Given
      const injection = {
        <%= props.name.camelCase %>Repository: new ( class <%= props.name.camelCase %>Repository {
          async deleteByID(id) { return true }
        })
      }
      
      const req = <%= props.request.valid %>

      // When
      const uc = delete<%= props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      

    })
  })

  describe('Invalid <%= props.name.pascalCase %>', () => {

    it('should not delete invalid <%= props.name.pascalCase %>', async () => {
      // Given
      const injection = {}
      const req = <%= props.request.invalid %>

      // When
      const uc = delete<%= props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
    })
  })
})
