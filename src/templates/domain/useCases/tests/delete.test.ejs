const delete<%- props.name.pascalCase %> = require('./delete<%- props.name.pascalCase %>')
const assert = require('assert')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.pascalCase %>')

describe('Delete the <%- props.name.raw %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('When a <%- props.name.raw %> exists', () => {

    it('should delete <%- props.name.raw %>', async () => {
      const injection = {
        <%- props.name.pascalCase %>Repository: new class <%- props.name.pascalCase %>Repository {
          async delete(entity) { return true }
          async findByID(id) { return [<%- props.name.pascalCase %>.fromJSON({ id })] }
        }
      }
      
      const req = {
        <%- props.request.valid %>
      }

      // When
      const uc = delete<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      

    })
  })
  
  describe('When a <%- props.name.raw %> does not exists', () => {

    it('should not delete <%- props.name.raw %>', async () => {
      // Given
      const injection = {
        <%- props.name.pascalCase %>Repository: new class <%- props.name.pascalCase %>Repository {
          async findByID(id) { return [] }
        }
      }
      const req = { id : '5' }

      // When
      const uc = delete<%- props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
      assert.deepStrictEqual(ret.err, {request :[{id:[{wrongType:"Number"}]}]})
    })
  })
})
