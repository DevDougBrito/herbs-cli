const create<%= props.name.pascalCase %> = require('./create<%= props.name.pascalCase %>')
const assert = require('assert')


describe('Create <%= props.name.pascalCase %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('Valid <%= props.name.pascalCase %>', () => {

    it('should add <%= props.name.pascalCase %> if is valid', async () => {
      // Given
      const injection = {
        <%= props.name.camelCase %>Repository: new ( class <%= props.name.camelCase %>Repository {
          async insert(<%= props.name.camelCase %>) { return (<%= props.name.camelCase %>) }
        })
      }

      const req = <%= props.request.valid %>

      // When
      const uc = create<%= props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      
      assert.strictEqual(ret.ok.isValid(), true)

    })
  })

  describe('Invalid <%= props.name.pascalCase %>', () => {

    it('should not create invalid <%= props.name.pascalCase %>', async () => {
      // Given
      const injection = {}

      const req = <%= props.request.invalid %>

      // When
      const uc = create<%= props.name.pascalCase %>(injection)()
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
    })
  })
})
