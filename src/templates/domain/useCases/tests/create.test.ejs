const create<%- props.name.pascalCase %> = require('./create<%- props.name.pascalCase %>')
const assert = require('assert')


describe('Create <%- props.name.raw %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('When a <%- props.name.raw %> is valid', () => {
  
    it('should create <%- props.name.raw %>', async () => {
      // Given
      const injection = {
        <%- props.name.camelCase %>Repository: new ( class <%- props.name.pascalCase %>Repository {
          async insert(<%- props.name.camelCase %>) { return (<%- props.name.camelCase %>) }
        })
      }

      const req = {
        <%- props.request.valid %>
      }

      // When
      const uc = create<%- props.name.pascalCase %>(injection)
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      
      assert.strictEqual(ret.ok.isValid({exceptIDs: true}), true)

    })
  })

  describe('When a <%- props.name.raw %> is invalid', () => {

    it('should not create <%- props.name.raw %>', async () => {
      // Given
      const injection = {}

      const req = {
        <%- props.request.invalid %>
      }

      // When
      const uc = create<%- props.name.pascalCase %>(injection)
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
      // assert.ok(ret.isInvalidEntityError)

    })
  })
})
