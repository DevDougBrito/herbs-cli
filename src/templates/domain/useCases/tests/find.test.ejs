const find<%- props.name.pascalCase %>ById = require('./find<%- props.name.pascalCase %>')
const assert = require('assert')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.pascalCase %>')

describe('Find a <%- props.name.raw %>', () => {
  const authorizedUser = { hasAccess: true }

  describe('When a <%- props.name.raw %> exists', () => {

    it('should return a <%- props.name.raw %>', async () => {
      // Given 
      const fake<%- props.name.pascalCase %> = {
        <%- props.mock %>
      }

      const injection = {
        <%- props.name.pascalCase %>Repository: class <%- props.name.pascalCase %>Repository {
          async findByID(id) { return ([<%- props.name.pascalCase %>.fromJSON(fake<%- props.name.pascalCase %>)]) }
        }
      }

      const req = {
        <%- props.request.valid %>
      }

      // When
      const uc = find<%- props.name.pascalCase %>ById(injection)
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isOk)      
      assert.strictEqual(ret.ok.isValid(), true)
      assert.strictEqual(JSON.stringify(ret.ok), JSON.stringify({id: ret.ok.id,...fakeUser}))
    })
  })

  describe('When a <%- props.name.raw %> does not exists', () => {

    it('return not return a <%- props.name.raw %>', async () => {
      // Given
      const injection = {
        <%- props.name.pascalCase %>Repository: class <%- props.name.pascalCase %>Repository {
          async findByID(id) { return ([]) }
        }
      }

      const req = {
        <%- props.request.invalid %>
      }

      // When
      const uc = find<%- props.name.pascalCase %>ById(injection)
      await uc.authorize(authorizedUser)
      const ret = await uc.run(req)

      // Then
      assert.ok(ret.isErr)
      assert.ok(ret.isNotFoundError)
    })
  })
})
