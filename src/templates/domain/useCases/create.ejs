const { usecase, step, Ok, Err } = require('@herbsjs/herbs')
const { herbarium } = require('@herbsjs/herbarium')
const <%- props.name.pascalCase %> = require('../../entities/<%- props.name.camelCase %>')

const create<%- props.name.pascalCase %> = injection => () =>
  usecase('Create <%- props.name.pascalCase %>', {
    // Input/Request metadata and validation 
    request: {
      <%- props.request %>
    },

    // Output/Response metadata
    response: <%- props.name.pascalCase %>,

    //Authorization with Audit
    // authorize: (user) => (user.canCreate<%- props.name.pascalCase %> ? Ok() : Err()),
    authorize: () => Ok(),

    setup: ctx => (ctx.di = injection),

    //Step description and function
    'Check if the <%- props.name.raw %> is valid': step(ctx => {
      ctx.<%- props.name.camelCase %> = <%- props.name.pascalCase %>.fromJSON(ctx.req)
      
      if (!ctx.<%- props.name.camelCase %>.isValid()) 
        return Err.invalidEntity({
          message: 'The <%- props.name.raw %> entity is invalid', 
          payload: { entity: '<%- props.name.raw %>' },
          cause: ctx.<%- props.name.camelCase %>.errors 
        })

      // returning Ok continues to the next step. Err stops the use case execution.
      return Ok() 
    }),

    'Save the <%- props.name.raw %>': step(async ctx => {
      // ctx.ret is the return value of a use case
      return (ctx.ret = await ctx.di.<%- props.name.pascalCase %>Repository.insert(ctx.<%- props.name.camelCase %>))
    })
  })

module.exports =
  herbarium.usecases
    .add(create<%- props.name.pascalCase %>, 'Create<%- props.name.pascalCase %>')
    .metadata({ group: '<%- props.name.pascalCase %>', operation: herbarium.crud.create, entity: <%- props.name.pascalCase %> })
    .usecase