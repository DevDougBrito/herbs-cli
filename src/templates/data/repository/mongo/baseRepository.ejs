module.exports = class Repository {
    constructor({ collection, mongo }){
        this.collection = mongo.collection(collection)
    }

    async find(filter){
        return await this.collection
            .find(filter)
            .toArray()
    }

    async find(filter, project){
        return await this.collection
            .find(filter)
            .project(project)
            .toArray()
    }

    async findByID(id){
        if(!id) return {}

        return await this.collection
            .findOne({ _id: id })
    }

    async findPaginated(options = { skip, limit, sort, query }){
        options.limit = options.limit || 0
        options.skip  = options.skip  || 0
        options.sort  = options.sort  || {}
        options.query = options.query || {}

        return await this.collection
            .find(options.query)
            .limit(options.limit)
            .skip(options.skip)
            .sort(options.sort)
            .toArray()
    }

    async insert(entity){
        const { ops } = await this.collection
            .insertOne(entity)
        return { id: ops[0]._id, ...ops[0] }
    }

    async insertMany(arrayEntity){
        return await this.collection
            .insertMany(arrayEntity)
    }

    async update(filter, updateDocument){
        return await this.collection
            .updateOne(filter, updateDocument)
    }

    async updateMany(filter, updateDocument){
        return await this.collection
            .updateMany(filter, updateDocument)
    }

    async deleteByID(id){
        return await this.collection
            .deleteOne({ _id: String(id)})
    }
    
    //TO DO: FindOne(filter, project)
    //TO DO: Update(id, entity)
    //TO DO: Replace(id, entity)
    //TO DO: Aggregate
    //TO DO: Watch
}